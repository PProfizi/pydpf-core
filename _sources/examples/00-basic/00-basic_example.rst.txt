
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-basic/00-basic_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-basic_00-basic_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-basic_00-basic_example.py:


.. _ref_basic_example:

Basic DPF-Core Usage
~~~~~~~~~~~~~~~~~~~~
This example shows how to open an example result file and do some
basic post-processing.

If you have ANSYS 2021R1 installed, getting running DPF is quite easy
as `ansys.dpf.core` takes care of launching all the services required
to start post-processing ANSYS files.

First, import the DPF-Core module as `dpf_core` and also import the
included examples file.

.. GENERATED FROM PYTHON SOURCE LINES 18-22

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples








.. GENERATED FROM PYTHON SOURCE LINES 23-38

Next, open an example and then print out the ``model`` object.  The
``Model`` class helps to organize access methods for the result by
keeping track of the operators and data sources used by the result
file.

Printing the model displays:
- Analysis type
- Available results
- Size of the mesh
- Number of results

Also, note that the first time you create a DPF object, Python will
automatically attempt to start the server in the background.  If you
wish to connect to an existing server (either local or remote), use
``dpf.connect_to_server()``

.. GENERATED FROM PYTHON SOURCE LINES 38-43

.. code-block:: default


    model = dpf.Model(examples.simple_bar)
    print(model)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DPF Model
    ------------------------------
    Static analysis
    Unit system: Metric (m, kg, N, s, V, A)
    Physics Type: Mecanic
    Available results:
         -  displacement                  
         -  element_nodal_forces          
         -  volume                        
         -  energy_stiffness_matrix       
         -  hourglass_energy              
         -  thermal_dissipation_energy    
         -  kinetic_energy                
         -  co_energy                     
         -  incremental_energy            
         -  temperature                   
    ------------------------------
    Meshed Region
            3751 nodes
            3000 elements
            Unit: m 
    ------------------------------
    Time/Frequency Info:
            Number of sets: 1

    With complex values
 
     Cumulative      Time (s)       Loadstep     Substep   
         1             1.0             1            1      





.. GENERATED FROM PYTHON SOURCE LINES 44-49

Model Metadata
~~~~~~~~~~~~~~
Specific metadata can be extracted from the model by referencing the
``metadata`` property of the model.  For example, just the
result_info can be printed with:

.. GENERATED FROM PYTHON SOURCE LINES 49-54

.. code-block:: default


    metadata = model.metadata
    print(metadata.result_info)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Static analysis
    Unit system: Metric (m, kg, N, s, V, A)
    Physics Type: Mecanic
    Available results:
         -  displacement                  
         -  element_nodal_forces          
         -  volume                        
         -  energy_stiffness_matrix       
         -  hourglass_energy              
         -  thermal_dissipation_energy    
         -  kinetic_energy                
         -  co_energy                     
         -  incremental_energy            
         -  temperature                   





.. GENERATED FROM PYTHON SOURCE LINES 55-56

The mesh region can be printed with

.. GENERATED FROM PYTHON SOURCE LINES 56-60

.. code-block:: default


    print(metadata.meshed_region)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Meshed Region
            3751 nodes
            3000 elements
            Unit: m 





.. GENERATED FROM PYTHON SOURCE LINES 61-62

and the time or frequency of the results can be printed with:

.. GENERATED FROM PYTHON SOURCE LINES 62-66

.. code-block:: default


    print(metadata.time_freq_support)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Time/Frequency Info:
            Number of sets: 1

    With complex values
 
     Cumulative      Time (s)       Loadstep     Substep   
         1             1.0             1            1      





.. GENERATED FROM PYTHON SOURCE LINES 67-77

Extracting Displacement Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
All results of the model can be accessed through the ``results``
property, which returns the ``Results`` class.  This class contains
the DPF result operators available to a specific result file, which
are listed when printing the object with ``print(results)``

Here, we connect the ``'U'`` operator with the data_sources, which
takes place automatically when running ``results.displacement()``.
By default, this is connected to the first result set, which for this static result is the only result.

.. GENERATED FROM PYTHON SOURCE LINES 77-84

.. code-block:: default

    results = model.results
    displacements = results.displacement()
    fields = displacements.outputs.fields_container()

    # finally, extract the data of the displacement field
    disp = fields[0].data
    disp




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[-1.22753781e-08, -1.20861254e-06, -5.02681396e-06],
           [-9.46666013e-09, -1.19379712e-06, -4.64249826e-06],
           [-1.22188426e-08, -1.19494216e-06, -4.63117832e-06],
           ...,
           [-1.35911608e-08,  1.52559428e-06, -4.29246409e-06],
           [-1.91212290e-08,  1.52577102e-06, -4.28782940e-06],
           [-2.69632909e-08,  1.52485289e-06, -4.27831232e-06]])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.186 seconds)


.. _sphx_glr_download_examples_00-basic_00-basic_example.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 00-basic_example.py <00-basic_example.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 00-basic_example.ipynb <00-basic_example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
