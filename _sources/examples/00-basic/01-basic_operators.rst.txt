
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-basic/01-basic_operators.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-basic_01-basic_operators.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-basic_01-basic_operators.py:


.. _ref_basic_operators_example:

Operators Overview
~~~~~~~~~~~~~~~~~~
Overview of the usage of operators in DPF.

Operators are primary method for interacting with and extracting
results.  Within DPF-Core, these operators are directly exposed with
the `Operators` class as well as wrapped within several other
convenience classes.

This example demonstrates how to work directly with operators and
compares it to wrapped approach.

.. GENERATED FROM PYTHON SOURCE LINES 17-21

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples








.. GENERATED FROM PYTHON SOURCE LINES 22-24

First, create a model object to establish a connection with an
example result file.

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: default

    model = dpf.Model(examples.static_rst)
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DPF Model
    ------------------------------
    Static analysis
    Unit system: Metric (m, kg, N, s, V, A)
    Physics Type: Mecanic
    Available results:
         -  displacement                  
         -  force                         
         -  stress                        
         -  volume                        
         -  energy_stiffness_matrix       
         -  hourglass_energy              
         -  thermal_dissipation_energy    
         -  kinetic_energy                
         -  co_energy                     
         -  incremental_energy            
         -  strain                        
         -  temperature                   
    ------------------------------
    Meshed Region
            81 nodes
            8 elements
            Unit: m 
    ------------------------------
    Time/Frequency Info:
            Number of sets: 1

    With complex values
 
     Cumulative      Time (s)       Loadstep     Substep   
         1             1.0             1            1      





.. GENERATED FROM PYTHON SOURCE LINES 28-35

Next, create a raw displacement operator ``"U"``.  Each operator
contains ``input`` and ``output`` pins that can be connected to
various sources, to include other operators.  This allows operators
to be "chained" to allow for highly efficient operations.

Here, we print out the available inputs and outputs of the
displacement operator.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default

    disp_op = dpf.Operator('U')
    print(disp_op.inputs)
    print(disp_op.outputs)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Available inputs:
         -   [1mmesh[0m : MeshedRegion, optional
                             
         -   [1mdomain_id[0m : int, optional
                             
         -   [1mbool_rotate_to_global[0m : B, optional
             If true the field is roated to global coordinate system (default true)
                             
         -   [1mrequested_location[0m : str, optional
                             
         -   [1mstreams_container[0m : StreamsContainer, optional
             Streams (result file container) (optional)
                             
         -   [1mmesh_scoping[0m : ScopingsContainer, Scoping, optional
             Mesh entities scoping, unordered_map<int, int> id to index (optional)
             (index is optional, to be set if a user wants the results at a given
             order)              
                             
         -   [1mdata_sources[0m : DataSources
             If the stream is null then we need to get the file path from the data
             sources             
                             
         -   [1mfields_container[0m : FieldsContainer, optional
             Fields container already allocated modified inplace
                             
         -   [1mtime_scoping[0m : Scoping, list, optional
                             

    Available outputs:
         -   fields_container    





.. GENERATED FROM PYTHON SOURCE LINES 41-46

Compute the Maximum Normalized Displacement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here, connect the input of the operator to the data sources
contained within the ``model`` object and then the maximum of the
norm of the operator to demonstrate how to chain various operators.

.. GENERATED FROM PYTHON SOURCE LINES 46-65

.. code-block:: default


    # connect to the data sources of the model
    disp_op.inputs.data_sources.connect(model.metadata.data_sources)

    # Create a field container norm operator and connect it to the
    # displacement operator to chain the operators.
    norm_op = dpf.Operator('norm_fc')
    norm_op.inputs.connect(disp_op.outputs)

    # create a field container min/max operator and connect it to the
    # output of the norm operator
    mm_op = dpf.Operator('min_max_fc')
    mm_op.inputs.connect(norm_op.outputs)

    # Finally, get the value of the maximum displacement
    field_max = mm_op.outputs.field_max()
    print(field_max)
    print(field_max.data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DPF displacement_1.s Field
        Location:   Nodal
        Unit:       m
        Num. id(s): 1
        Shape:      1
            Value: 1.4815370582001863e-08

    [1.48153706e-08]




.. GENERATED FROM PYTHON SOURCE LINES 66-72

Wrapped Operators
~~~~~~~~~~~~~~~~~
The ``model.results`` property contains all the wrapped operators
available for a given result.  This is provided out of convenience
as not all operators may be available for a given result and it is
much easier to reference available operators by first running:

.. GENERATED FROM PYTHON SOURCE LINES 72-75

.. code-block:: default

    print(model.results)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Static analysis
    Unit system: Metric (m, kg, N, s, V, A)
    Physics Type: Mecanic
    Available results:
         -  displacement                  
         -  force                         
         -  stress                        
         -  volume                        
         -  energy_stiffness_matrix       
         -  hourglass_energy              
         -  thermal_dissipation_energy    
         -  kinetic_energy                
         -  co_energy                     
         -  incremental_energy            
         -  strain                        
         -  temperature                   





.. GENERATED FROM PYTHON SOURCE LINES 76-77

Create the displacement operator directly from the ``results`` property

.. GENERATED FROM PYTHON SOURCE LINES 77-90

.. code-block:: default

    disp_op = model.results.displacement()

    # Out of convenience, ``operators_helper`` contains special functions
    # that return the same type as the input.  In this case, we can easily
    # chain several operators and have their inputs and outputs
    # automatically connected.
    from ansys.dpf.core.operators_helper import min_max, norm
    mm_op = min_max(norm(disp_op))

    # Finally, get the value of the maximum displacement.
    field_max = mm_op.outputs.field_max()
    print(field_max)
    print(field_max.data)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DPF displacement_1.s Field
        Location:   Nodal
        Unit:       m
        Num. id(s): 1
        Shape:      1
            Value: 1.4815370582001863e-08

    [1.48153706e-08]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.106 seconds)


.. _sphx_glr_download_examples_00-basic_01-basic_operators.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 01-basic_operators.py <01-basic_operators.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 01-basic_operators.ipynb <01-basic_operators.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
